@page "/tarefas-resumo"
@rendermode InteractiveWebAssembly

<h4>Resumo de Tarefas</h4>
<h5>Usando <b>rendermode InteractiveWebAssembly</b></h5>
<br />

@* Bloco de estados da UI *@
@if (tarefas is null)
{
    <p class="text-muted">Carregando dados ...</p>
}
else if (!tarefas.Any())
{
    <p class="text-muted">Nenhuma tarefa registrada</p>
}
else
{
  @*   <ul class="list-group">
        <li class="list-group-item">
            <strong>Total de Tarefas:</strong> @tarefas.Count
        </li>
        <li class="list-group-item">
            <strong>Concluídas:</strong> @tarefas.Count(t => t.Concluida)
        </li>
        <li class="list-group-item">
            <strong>Pendentes:</strong> @tarefas.Count(t => !t.Concluida)
        </li>
        <li class="list-group-item">
            <strong>Data da Primeira Tarefa:</strong>
            @(tarefas.Any() ? tarefas.Min(t => t.DataCriacao).ToString("dd/MM/yyyy") : "—")
        </li>
        <li class="list-group-item">
            <strong>Data da Última Tarefa:</strong>
            @(tarefas.Any() ? tarefas.Max(t => t.DataCriacao).ToString("dd/MM/yyyy") : "—")
        </li>
    </ul>

    <br />
    <h5>Lista de Tarefas</h5>
    <ul class="list-group">
        @foreach (var tarefa in tarefas)
        {
            <li class="list-group-item">
                <strong>@tarefa.Descricao:</strong>
                @(tarefa.Concluida ? "Concluída" : "Pendente") —
                Criada em @tarefa.DataCriacao.ToString("dd/MM/yyyy")
            </li>
        }
    </ul> *@

    <br />
    <h5>Estatísticas com Ícones</h5>
    <ul class="list-group shadow-sm rounded-4 overflow-hidden">
        @foreach (var item in estatisticas)
        {
            <li class="list-group-item d-flex align-items-center">
                <i class="bi @item.Icone fs-4 me-3 @item.Cor"></i>
                <div>
                    <div class="fw-semibold">@item.Label</div>
                    <div class="text-muted small">@item.Valor</div>
                </div>
            </li>
        }
    </ul>
}

@code {
    // ✅ Lista de tarefas (nunca deve ficar nula em tempo de uso)
    private List<Tarefa>? tarefas;

    // ✅ Estrutura de exibição para as estatísticas
    private record Estatistica(string Icone, string Cor, string Label, string Valor);

    // ✅ Coleção renderizada de estatísticas
    private List<Estatistica> estatisticas = new();

    // -----------------------------------------------------------
    // Ciclo de vida: carregar dados e só então montar estatísticas
    // -----------------------------------------------------------
    protected override async void OnInitialized()
    {
        // 1) Carregar as tarefas de uma fonte (mock/dados locais/serviço)
        //    - Usa operador de coalescência para garantir lista não nula
        tarefas = await TarefaDados.ObterTarefasAssinc();

        // 2) Montar as estatísticas com base nas tarefas carregadas
        MontarEstatisticas();
    }

    // -----------------------------------------------------------
    // Método que calcula e preenche as estatísticas com segurança
    // -----------------------------------------------------------
    private void MontarEstatisticas()
    {
        // 🔒 Garantir que 'tarefas' não seja nula
        tarefas ??= new List<Tarefa>();

        // 📊 Cálculos básicos
        int total = tarefas.Count;
        int concluidas = tarefas.Count(t => t.Concluida);
        int pendentes = total - concluidas;

        // 📅 Datas seguras (lista vazia → “—”)
        string primeira = tarefas.Any()
            ? tarefas.Min(t => t.DataCriacao).ToString("dd/MM/yyyy")
            : "—";

        string ultima = tarefas.Any()
            ? tarefas.Max(t => t.DataCriacao).ToString("dd/MM/yyyy")
            : "—";

        // 🧮 Popular a coleção que será renderizada na seção “Estatísticas com Ícones”
        estatisticas = new()
        {
            new("bi-list-check",        "text-primary", "Total de Tarefas", total.ToString()),
            new("bi-check-circle-fill", "text-success", "Concluídas",       concluidas.ToString()),
            new("bi-hourglass-split",   "text-warning", "Pendentes",        pendentes.ToString()),
            new("bi-calendar-check",    "text-info",    "Primeira Tarefa",  primeira),
            new("bi-calendar-event",    "text-danger",  "Última Tarefa",    ultima)
        };
    }

   
}

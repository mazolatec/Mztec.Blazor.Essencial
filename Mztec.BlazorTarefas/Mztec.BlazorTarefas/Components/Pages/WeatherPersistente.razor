@page "/weather-persistent"
@rendermode @(new InteractiveServerRenderMode(prerender: true))
@inject PersistentComponentState ApplicationState
@implements IDisposable

<h1>Weather Persistente</h1>
<br />
<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private bool InteratividadeDisponivel => RendererInfo?.IsInteractive == true;

    private static int iniciaContadorOnInit = 0;

    private PersistingComponentStateSubscription? persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        iniciaContadorOnInit++;

        Console.WriteLine($"OnInitializedAsync (PersistentState) chamado. Contagem:{iniciaContadorOnInit}. É interativo: {InteratividadeDisponivel}. Renderizador: {RendererInfo?.Name}");

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistirDados);

        if (!ApplicationState.TryTakeFromJson<WeatherForecast[]>("weatherData", out forecasts))
        {
            // ESTA LÓGICA SÓ SERÁ EXECUTADA NA PRIMEIRA CHAMADA (NO SERVIDOR)
            Console.WriteLine($"*** Lógica de carga de dados EXECUTADA! (Contagem: {iniciaContadorOnInit}) ***");
            // simula carregamento assincrono (sua chamada de API real)
            await Task.Delay(900);

            var startDate = DateOnly.FromDateTime(DateTime.Now);
            var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
            forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
        }
    }

    private Task PersistirDados()
    {
        ApplicationState.PersistAsJson("weatherData", forecasts);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription?.Dispose();
    }

    

}

@page "/tarefas"
@page "/tarefas/{status}"
@page "/list"
@rendermode InteractiveServer

 <button class="btn btn-link mb-3" @onclick="IrParaResumo">
<i class="bi bi-bar-chart-line"></i>
    Ir para Resumo
</button> 


<!-- INÍCIO DA SEÇÃO DE DIAGNÓSTICO -->
<div class="alert alert-info mt-4 p-3" style="border-left: 5px solid #0dcaf0;">
    <h5 class="alert-heading fw-bold">Diagnóstico de Renderização</h5>
    <hr>
    <dl class="row">
        <dt class="col-sm-4">Local de Execução:</dt>
        <dd class="col-sm-8"><code>@RendererInfo.Name</code></dd>

        <dt class="col-sm-4">É Interativo (agora):</dt>
        <dd class="col-sm-8"><code>@RendererInfo.IsInteractive</code></dd>

        <dt class="col-sm-4">Modo Atribuído:</dt>
        <dd class="col-sm-8"><code>@(AssignedRenderMode?.ToString() ?? "Nenhum (Estático/SSR)")</code></dd>
    </dl>
</div>
<!-- FIM DA SEÇÃO CORRIGIDA -->
@if (RendererInfo?.Name == "Static")
{
    <p>Este componente foi renderizado estaticamente e não é interativo.</p>
}
else if (RendererInfo?.IsInteractive == true)
{
    <p>Este componente foi renderizado no @RendererInfo.Name , agora é interativo.</p>
}


<h3>Lista de Tarefas</h3>
<h5>
    Usando <b>rendermode InteractiveServer</b>
</h5>
<br/>


@if(tarefas == null)
{
    <img src="https://media.giphy.com/media/qHOf8vC1ppFQs/giphy.gif" width="100" class="icone-carregando" />
    <p>Carregando tarefas...</p>
}
else if(!tarefas.Any())
{
    <img src="icons/erro-404.png" class="icone-carregando" />
    <p>Ainda não existem tarefas...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Descrição</th>
                <th>Data de Criação</th>
                <th>Status</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var tarefa in tarefas)
            {
                <tr>
                    <td>@tarefa.Descricao</td>
                    <td>@tarefa.DataCriacao.ToString("dd/MM/yyyy")</td>
                    <td>
                        @if(tarefa.Concluida)
                        {
                            <span class="badge bg-success">Concluída</span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">Pendente</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => AltenarConclusao(tarefa.ID)">
                            @if(tarefa.Concluida)
                            {
                                <span>Marcar como Pendente</span>
                            }
                            else
                            {
                                <span>Marcar como Concluída</span>
                            }
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoverTarefa(tarefa.ID)">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    [Parameter]
    public string ? Status { get; set; }
    [Inject]
    private NavigationManager Nav { get; set; } = default!;
    private List<Tarefa>? tarefas;

    protected override async void OnInitialized()
    {
        //await Task.Delay(100);
        var todas = await TarefaDados.ObterTarefasAssinc();
        tarefas = Status?.ToLower() switch
        {
            "concluidas" => todas.Where(t => t.Concluida).ToList(),
            "pendentes" => todas.Where(t => !t.Concluida).ToList(),
             _ => todas
        };
    }

    private void RemoverTarefa(Guid id)
    {
        // if (tarefas is not null)
        // {
        //     tarefas.Remove(tarefa);
        // }
        //Usando RemoveAll com expressão lambda onde busca id igual ao id passado se não encontrar devolve null
        tarefas?.RemoveAll(t => t.ID == id);
    }

    private void AltenarConclusao(Guid guid)
    {   //Usando FirstOrDefault para buscar a primeira tarefa que tenha o id igual ao id passado
        var tarefa = tarefas?.FirstOrDefault(t => t.ID == guid);
        if (tarefa is not null)
        {
            tarefa.Concluida = !tarefa.Concluida;
        }
    }
    private void IrParaResumo()
    {
        Nav.NavigateTo("/tarefas-resumo");
    }
}
